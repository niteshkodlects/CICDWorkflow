<?xml version="1.0" encoding="UTF-8"?>
<ruleset xmlns="http://pmd.sourceforge.net/ruleset/2.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Default ruleset used by the CodeClimate Engine for Salesforce.com Apex" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
   <description>Default ruleset used by the Code Climate Engine for Salesforce.com Apex</description>
   <exclude-pattern>.*/.sfdx/.*</exclude-pattern>
   <!-- DESIGN -->
   <rule ref="category/apex/design.xml/ExcessiveClassLength" message="Avoid really long classes (lines of code)">
      <priority>3</priority>
      <properties>
         <property name="minimum" value="1000" />
      </properties>
   </rule>
   <rule ref="category/apex/design.xml/ExcessiveParameterList" message="Avoid long parameter lists">
      <priority>3</priority>
      <properties>
         <property name="minimum" value="4" />
      </properties>
   </rule>

   <rule ref="category/apex/design.xml/ExcessivePublicCount" message="This class has too many public methods and attributes">
      <priority>3</priority>
      <properties>
         <property name="minimum" value="25" />
      </properties>
   </rule>
   <rule ref="category/apex/design.xml/NcssConstructorCount" message="The constructor has an NCSS line count of {0}">
      <priority>3</priority>
      <properties>
         <property name="minimum" value="20" />
      </properties>
   </rule>
   <rule ref="category/apex/design.xml/NcssMethodCount" message="The method {0}() has an NCSS line count of {1}">
      <priority>3</priority>
      <properties>
         <property name="minimum" value="60" />
      </properties>
   </rule>
   <rule ref="category/apex/design.xml/NcssTypeCount" message="The type has an NCSS line count of {0}">
      <priority>3</priority>
      <properties>
         <property name="minimum" value="700" />
      </properties>
   </rule>
   <rule ref="category/apex/design.xml/StdCyclomaticComplexity" message="The {0} ''{1}'' has a Standard Cyclomatic Complexity of {2}.">
      <priority>3</priority>
      <properties>
         <property name="reportLevel" value="10" />
      </properties>
   </rule>
   <rule ref="category/apex/design.xml/TooManyFields" message="Too many fields">
      <priority>3</priority>
      <properties>
         <property name="maxfields" value="20" />
      </properties>
   </rule>
   <rule ref="category/apex/design.xml/AvoidDeeplyNestedIfStmts" message="Deeply nested if..else statements are hard to read">
      <priority>3</priority>
      <properties>
         <property name="problemDepth" value="4" />
      </properties>
   </rule>
   <rule ref="category/apex/design.xml/CyclomaticComplexity">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/design.xml/CognitiveComplexity">
    <properties>
        <property name="classReportLevel" value="50" />
        <property name="methodReportLevel" value="15" />
    </properties>
   </rule>

   <!-- PERFORMANCE -->
   <rule ref="category/apex/performance.xml/AvoidSoqlInLoops" message="Avoid Soql queries inside loops">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/performance.xml/AvoidSoslInLoops" message="Avoid Sosl queries inside loops">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/performance.xml/AvoidDmlStatementsInLoops" message="Avoid DML Statements inside loops">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/performance.xml/AvoidDebugStatements" message="Avoid debug statements since they impact on performance">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/performance.xml/EagerlyLoadedDescribeSObjectResult" message="DescribeSObjectResult could be being loaded eagerly with all child relationships.">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/performance.xml/OperationWithLimitsInLoop" message="Avoid operations in loops that may hit governor limits">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   
   <!-- ERROR PRONE -->
   <rule ref="category/apex/errorprone.xml/ApexCSRF" message="Avoid making DML operations in Apex class constructor or initializers">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   
   <rule ref="category/apex/errorprone.xml/AvoidDirectAccessTriggerMap" message="Avoid directly accessing Trigger.old and Trigger.new">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/errorprone.xml/AvoidHardcodingId" message="Avoid hardcoding ID's">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/errorprone.xml/AvoidNonExistentAnnotations">
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/errorprone.xml/EmptyCatchBlock" message="Avoid empty catch blocks">
      <priority>3</priority>
      <properties>
         </properties>
   </rule>
   <rule ref="category/apex/errorprone.xml/EmptyIfStmt" message="Avoid empty 'if' statements">
      <priority>3</priority>
      <properties>
         </properties>
   </rule>
   <rule ref="category/apex/errorprone.xml/EmptyStatementBlock" message="Avoid empty block statements.">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/errorprone.xml/EmptyTryOrFinallyBlock" message="Avoid empty try or finally blocks">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/errorprone.xml/EmptyWhileStmt" message="Avoid empty 'while' statements">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/errorprone.xml/InaccessibleAuraEnabledGetter" message="AuraEnabled getter must be public or global if is referenced in Lightning components">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/errorprone.xml/MethodWithSameNameAsEnclosingClass" message="Classes should not have non-constructor methods with the same name as the class">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/errorprone.xml/OverrideBothEqualsAndHashcode" message="Ensure you override both equals() and hashCode()">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/errorprone.xml/TestMethodsMustBeInTestClasses" message="Test methods must be in test classes">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   
   <!-- BEST PRACTICES -->
   <rule ref="category/apex/bestpractices.xml/ApexAssertionsShouldIncludeMessage">
      <priority>4</priority>
   </rule>
   
   <rule ref="category/apex/bestpractices.xml/ApexUnitTestClassShouldHaveAsserts" message="Apex unit test classes should have at least one System.assert() or assertEquals() or AssertNotEquals() call">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   
   <rule ref="category/apex/bestpractices.xml/ApexUnitTestMethodShouldHaveIsTestAnnotation" >
      <priority>4</priority>
   </rule>
   <rule ref="category/apex/bestpractices.xml/ApexUnitTestShouldNotUseSeeAllDataTrue" message="@isTest(seeAllData=true) should not be used in Apex unit tests because it opens up the existing database data for unexpected modification by tests">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/bestpractices.xml/AvoidGlobalModifier" message="Avoid using global modifier">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/bestpractices.xml/AvoidLogicInTrigger" message="Avoid logic in triggers">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/bestpractices.xml/DebugsShouldUseLoggingLevel" message="Calls to System.debug should specify a logging level.">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/bestpractices.xml/UnusedLocalVariable">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   

   <!-- CODE STYLE -->
   <rule ref="category/apex/codestyle.xml/ClassNamingConventions" message="Class names should begin with an uppercase character">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/codestyle.xml/IfElseStmtsMustUseBraces" message="Avoid using 'if...else' statements without curly braces">
      <priority>3</priority>
      <properties>
         </properties>
   </rule>
   <rule ref="category/apex/codestyle.xml/IfStmtsMustUseBraces" message="Avoid using if statements without curly braces">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/codestyle.xml/FieldDeclarationsShouldBeAtStart" message="Field declaration for ''{0}'' should be before method declarations in its class">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/codestyle.xml/FieldNamingConventions" message="The {0} name ''{1}'' doesn''t match ''{2}''">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/codestyle.xml/ForLoopsMustUseBraces" message="Avoid using 'for' statements without curly braces">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/codestyle.xml/FormalParameterNamingConventions" message="The {0} name ''{1}'' doesn''t match ''{2}''">
      <priority>1</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/codestyle.xml/LocalVariableNamingConventions" message="The {0} name ''{1}'' doesn''t match ''{2}''">
      <priority>1</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/codestyle.xml/MethodNamingConventions" message="Method name does not begin with a lower case character.">
      <priority>1</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/codestyle.xml/OneDeclarationPerLine">
      <priority>1</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/codestyle.xml/PropertyNamingConventions">
      <priority>1</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/codestyle.xml/VariableNamingConventions" message="{0} variable {1} should begin with {2}">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/codestyle.xml/WhileLoopsMustUseBraces" message="Avoid using 'while' statements without curly braces">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   

   <!-- SECURITY -->
   <rule ref="category/apex/security.xml/ApexBadCrypto" message="Apex Crypto should use random IV/key">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/security.xml/ApexCRUDViolation" message="Validate CRUD permission before SOQL/DML operation">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/security.xml/ApexCSRF" message="Avoid making DML operations in Apex class constructor/init method">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/security.xml/ApexDangerousMethods" message="Calling potentially dangerous method">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/security.xml/ApexInsecureEndpoint" message="Apex callouts should use encrypted communication channels">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/security.xml/ApexOpenRedirect" message="Apex classes should safely redirect to a known location">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/security.xml/ApexSharingViolations" message="Apex classes should declare a sharing model if DML or SOQL is used">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/security.xml/ApexSOQLInjection" message="Apex classes should escape variables merged in DML query">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/security.xml/ApexSuggestUsingNamedCred" message="Consider using named credentials for authenticated callouts">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/security.xml/ApexXSSFromEscapeFalse" message="Apex classes should escape addError strings">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/apex/security.xml/ApexXSSFromURLParam" message="Apex classes should escape Strings obtained from URL parameters">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   
   <rule ref="category/vf/security.xml/VfCsrf" message="Apex classes should escape Strings obtained from URL parameters">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/vf/security.xml/VfHtmlStyleTagXss" message="Apex classes should escape Strings obtained from URL parameters">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>
   <rule ref="category/vf/security.xml/VfUnescapeEl" message="Apex classes should escape Strings obtained from URL parameters">
      <priority>3</priority>
      <properties>
      </properties>
   </rule>

	<!-- DOCUMENTATION -->
	<rule ref="category/apex/documentation.xml/ApexDoc"/>
	
	<!-- Custom Rules -->
	<rule ref="resources/design.xml/ApexAbstractClassWithoutAnyMethod" message="No abstract method which means that the keyword is most likely used to prevent instantiation. Use a private or protected constructor instead.">
		<priority>1</priority>
    </rule>
	
	<rule ref="resources/design.xml/ApexAvoidRethrowingException" message="A catch statement that catches an exception only to rethrow it should be avoided.">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/design.xml/ApexCollapsibleIfStatements" message="These nested if statements could be combined">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/design.xml/ApexFinalFieldCouldBeStatic" message="This final field could be made static.">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/design.xml/ApexLogicInversion" message="Use opposite operator instead of the logic complement operator.">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/design.xml/ApexSimplifyBooleanReturns" message="Avoid unnecessary if..then..else statements when returning booleans">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/design.xml/ApexSimplifyConditional" message="No need to check for null before an instanceof">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/design.xml/ApexSingleMethodSingleton" message="Class contains multiple getInstance methods. Please review.">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/design.xml/ApexAvoidThrowingNewInstanceOfSameException" message="Avoid Throwing New Instance Of Same Exception">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/design.xml/ApexCouplingBetweenObjects" message="High amount of different objects as members denotes a high coupling">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/design.xml/ApexExceptionAsFlowControl" message="Avoid Throwing Exception wwhich will get caught in another Catch block Code.">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/design.xml/ApexExcessiveMethodLength" message="Avoid Excessive Method Length in Code">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/design.xml/ApexTooManyMethods" message=" A class with too many methods is probably a good suspect for refactoring, in order to reduce its
  				 complexity and find a way to have more fine grained objects.">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/design.xml/ApexSingularField" message="This field is used in only one method and the first usage is assigning a value to the field. This probably means that the field can be changed to a local variable.">
                                <priority>3</priority>
    </rule>
	
	<rule ref="resources/design.xml/VfImgWithoutAltCheck" message="The alt attribute provides a textual alternative to an image. It is used whenever the actual image cannot be rendered. Common reasons for that include:
			1) The image can no longer be found
			2) Slow internet connections, while waiting for the image to download
			3) Visually impaired users using a screen reader software
			4) Images loading is disabled, e.g. to reduce data consumption on mobile phones">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/design.xml/VfImgWithoutWidthOrHeightCheck" message="If the width and height attributes are set, the space required for the image is reserved immediately by the browser, even before it actually starts to load the image. Without those attributes, the page layout constantly changes as images are loaded until they are all loaded, which can disorient users.">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/design.xml/VfInputImgWithoutAltCheck" message="Input image with no alt tag should not be used.The alt attribute provides a textual alternative to an image. It is used whenever the actual image cannot be rendered.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/design.xml/VfInputImgWithoutWidthOrHeightCheck" message="Missing width and height attributes fo Image tag.">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/performance.xml/ApexAddEmptyString" message="Do not add empty strings">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/performance.xml/ApexCallSuperTwiceInConstructor" message="Super cannot be called twice in constructor.">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/performance.xml/ApexUselessStringValueOf" message="No need to call String.valueOf to append to a string.">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/performance.xml/ApexAvoidSizeOfSoql" message="Avoid SizeOf method in Soql">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/performance.xml/ApexInefficientEmptyStringCheck" message="Inefficient Empty StringCheck">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/performance.xml/ApexUnnecessaryWrapperObjectCreation" message="Unnecessary Wrapper Object Creation">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/errorprone.xml/ApexAssignmentInOperand" message="Avoid assignments in operands">
		<priority>4</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexAssignmentToNonFinalStatic" message="Possible unsafe assignment to a non-final static field in a constructor.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexAvoidBranchingStatementAsLastInLoop" message="Avoid using a branching statement as the last in a loop.">
		<priority>2</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexAvoidCatchingNPE" message="Avoid catching NullPointerException; consider removing the cause of the NPE.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexAvoidDuplicateLiterals" message="The String literal {0} appears {1} times in this file.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexDoNotThrowExceptionInFinally" message="A throw statement in a finally block makes the control flow hard to understand.">
		<priority>4</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexEmptyInitialiser" message="Blocks cannot be empty">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexEmptyStaticInitializer" message="Empty static block Found.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexMisplacedNullCheck" message="The null check here is misplaced; if the variable is null there will be a NullPointerException.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexMissingStaticMethodInNonInstantiatableClass" message="Class cannot be instantiated and does not provide any static methods or fields.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexNonStaticInitializer" message="Avoid non-static initializer block.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexReturnEmptyArrayRatherThanNull" message="Return an empty array rather than 'null'.">
		<priority>1</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexReturnFromFinallyBlock" message="Avoid returning from a finally block">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexTestClassWithoutTestCases" message="Class is flagged as a Test Class but it doesn't contain any tests.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexUnnecessaryCaseChange" message="Using equalsIgnoreCase() is faster than using toUpperCase/toLowerCase().equals()">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexUnnecessaryConversionTemporary" message="Avoid unnecessary temporaries when converting primitives to Strings.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexAvoidInstanceofChecksInCatchClause" message="An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type.">
		<priority>2</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexBrokenNullCheck" message="The null check is broken since it will throw a NullPointerException itself.">
		<priority>2</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexClassWithoutTestCases" message="Having test methods in non-test classes is not a good practise.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexEqualsNullCheck" message="Avoid Equals null check in Code">
		<priority>1</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexJumbledIncrementer" message="Avoid jumbled loop incrementers.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexNonUnitTestContainsAsserts" message="Non test classes should not contain assert method call.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexUnconditionalIfStatement" message="Do not use 'if' statements that are always true or always false">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexUnnecessaryBooleanAssertion" message="assertTrue(true) or similar statements are unnecessary">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexUnusedNullCheckInEquals" message="After checking an object reference for null, you should invoke equals() on that object rather than passing it to another object's equals() method.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/ApexAvoidMultipleUnaryOperators" message="Using multiple unary operators may be a bug, and/or is confusing.">
        <priority>2</priority>
    </rule>
    <rule ref="resources/errorprone.xml/ApexUseLocaleWithCaseConversions" message="When doing String.toLowerCase()/toUpperCase() conversions, use Locales to avoids problems with languages.">
        <priority>3</priority>
    </rule>
    <rule ref="resources/errorprone.xml/ApexUselessOperationOnImmutable" message="Avoid peration on an Immutable object (String, BigDecimal or BigInteger) as it won't change the object itself.">
        <priority>2</priority>
    </rule>
    <rule ref="resources/errorprone.xml/ApexIdempotentOperationsRule" message="Avoid idempotent operations (like assigning a variable to itself).">
        <priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/VfCrossSiteScriptingReflected" message="Reflected Cross-site Scripting (XSS) occur when an attacker injects browser executable code within a single HTTP response. See https://developer.salesforce.com/docs/atlas.en-us.pages.meta/pages/pages_security_tips_xss.htm">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/VfPasswordAutocompleteCheck" message="autocomplete set to off is preferred for password fields.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/VfUnencodedScriptRule" message="Makes sure that all values obtained from URL parameters are properly escaped/sanitized to avoid XSS attacks.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/errorprone.xml/VfUnescapedAttributes" message="Avoid using unescaped parameters, as it can be a security risk">
		<priority>2</priority>
    </rule>
	
	
	<rule ref="resources/bestpractices.xml/ApexAbstractClassWithoutAbstractMethod" message="This abstract class does not have any abstract methods">
		<priority>3</priority>
    </rule>
	<rule ref="resources/bestpractices.xml/ApexAvoidUsingHardCodedIP" message="Do not hard code the IP address.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/bestpractices.xml/ApexPositionLiteralsFirstInComparisons" message="Position literals first in String comparisons.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/bestpractices.xml/ApexPreserveStackTrace" message="New exception is thrown in catch block, original stack trace may be lost.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/bestpractices.xml/ApexUnusedPrivateField" message="Avoid unused private fields.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/bestpractices.xml/ApexUnusedPrivateMethod" message="Avoid unused private methods such as ''{0}''.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/bestpractices.xml/ApexAvoidPublicFields" message="Avoid Public Fields.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/bestpractices.xml/ApexAvoidReassigningParameters" message="Reassigning values to incoming parameters is not recommended. Use temporary local variables instead.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/bestpractices.xml/ApexSystemDebug" message="Avoid unnecessary System.debug">
		<priority>2</priority>
    </rule>
	<rule ref="resources/bestpractices.xml/ApexUseCollectionIsEmpty" message="Apex Use CollectionIsEmpty">
		<priority>3</priority>
    </rule>
	<rule ref="resources/bestpractices.xml/ApexUseAnnotationOnTestClass" message="Classes containing only test methods should be annotated with @isTest">
		<priority>3</priority>
    </rule>
	<rule ref="resources/bestpractices.xml/ApexUnusedFormalParameter" message="Avoid passing parameters to methods or constructors without actually referencing them in the method body.">
		<priority>3</priority>
    </rule>
    <rule ref="resources/bestpractices.xml/ApexUnusedLocalVariable" message="Detects when a local variable is declared and/or assigned, but not used.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/bestpractices.xml/VfBoldTagsCheck" message="The &lt;strong&gt;/&lt;b&gt; tags have exactly the same effect in most web browsers, but there is a fundamental difference between them: &lt;strong&gt; has a semantic meaning whereas &lt;b&gt; only conveys styling information like CSS.
			When &lt;b&gt; can have simply no effect on a Palm device with limited display or when a screen reader software is used by a blind person, &lt;strong&gt; will:
			
			Underline the characters on a Palm Pilot
			Speak with lower tone when using a screen reader such as Jaws
			And display the text bold in normal browsers
			
			Consequently:
			
			1)in order to convey semantics, the &lt;b&gt; tags shall never be used,
			2)in order to convey styling information, the &lt;b&gt; should be avoided and CSS should be used instead.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/bestpractices.xml/VfItalicTagsCheck" message="In order to convey styling information, i tag should be avoided and CSS should be used instead.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/bestpractices.xml/VfUnsupportedTagsInHtml5Check" message="This tag is no longer supported in HTML5 and should not be used">
		<priority>2</priority>
    </rule>
	
	<rule ref="resources/codestyle.xml/ApexConfusingTernary" message="Avoid if (x != y) ..; else ..;">
		<priority>3</priority>
    </rule>
	<rule ref="resources/codestyle.xml/ApexAvoidProtectedFieldInFinalClass" message="Do not use protected fields in final classes since they cannot be subclassed">
		<priority>3</priority>
    </rule>
	<rule ref="resources/codestyle.xml/ApexEmptyMethodInAbstractClassShouldBeAbstract" message="Empty Method In Abstract Class Should Be Abstract">
		<priority>3</priority>
    </rule>
	<rule ref="resources/codestyle.xml/ApexForLoopShouldBeWhileLoop" message="This for loop could be simplified to a while loop">
		<priority>3</priority>
    </rule>
	<rule ref="resources/codestyle.xml/ApexUnnecessaryLocalBeforeReturn" message="Avoid the creation of unnecessary local variables.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/codestyle.xml/ApexUnnecessaryReturn" message="Avoid the use of unnecessary return statements.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/codestyle.xml/VfLongJavaScriptCheck" message="Too many lines of javascript is not recommended.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/codestyle.xml/VfMaxLineLengthCheck" message="Avoid lengthy JavaScript.The maximum length of a line before an issue is raised. The default is 120.">
		<priority>3</priority>
    </rule>
	<rule ref="resources/codestyle.xml/VfMetaRefreshCheck" message="Use of &lt;meta http-equiv refresh&gt; is discouraged">
		<priority>3</priority>
    </rule>
	<rule ref="resources/codestyle.xml/VfMouseEventWithoutKeyboardEquivalentCheck" message="Add keyboard equivalent to mounse event">
		<priority>3</priority>
    </rule>
	<rule ref="resources/codestyle.xml/VfNonConsecutiveHeadingCheck" message="Use the headers in proper order">
		<priority>3</priority>
    </rule>
	
	<rule ref="resources/documentation.xml/ApexUncommentedEmptyMethod" message="Document empty method body">
		<priority>3</priority>
    </rule>
</ruleset>